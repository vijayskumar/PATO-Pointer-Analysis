TranslationUnitDecl 0x3246f60 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x3247458 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
|-TypedefDecl 0x32474b8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
|-TypedefDecl 0x3247828 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list '__va_list_tag [1]'
|-FunctionDecl 0x3247a10 <test.c:3:1, line:7:1> line:3:6 used foo 'void (int *, int *)'
| |-ParmVarDecl 0x32478c0 <col:10, col:15> col:15 used a 'int *'
| |-ParmVarDecl 0x3247938 <col:18, col:23> col:23 used b 'int *'
| `-CompoundStmt 0x328e2a8 <col:26, line:7:1>
|   `-IfStmt 0x328e278 <line:4:3, line:6:3>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x3247bc8 <line:4:7, col:14> 'int' '>'
|     | |-ImplicitCastExpr 0x3247bb0 <col:7, col:10> 'int' <LValueToRValue>
|     | | `-ArraySubscriptExpr 0x3247b68 <col:7, col:10> 'int' lvalue
|     | |   |-ImplicitCastExpr 0x3247b50 <col:7> 'int *' <LValueToRValue>
|     | |   | `-DeclRefExpr 0x3247b08 <col:7> 'int *' lvalue ParmVar 0x32478c0 'a' 'int *'
|     | |   `-IntegerLiteral 0x3247b30 <col:9> 'int' 0
|     | `-IntegerLiteral 0x3247b90 <col:14> 'int' 1
|     |-CompoundStmt 0x328e258 <col:17, line:6:3>
|     | `-BinaryOperator 0x328e230 <line:5:5, col:12> 'int' '='
|     |   |-ArraySubscriptExpr 0x3247c50 <col:5, col:8> 'int' lvalue
|     |   | |-ImplicitCastExpr 0x3247c38 <col:5> 'int *' <LValueToRValue>
|     |   | | `-DeclRefExpr 0x3247bf0 <col:5> 'int *' lvalue ParmVar 0x3247938 'b' 'int *'
|     |   | `-IntegerLiteral 0x3247c18 <col:7> 'int' 0
|     |   `-IntegerLiteral 0x3247c78 <col:12> 'int' 2
|     `-<<<NULL>>>
|-FunctionDecl 0x328e420 <line:9:1, col:26> col:6 bar 'void (float, float)'
| |-ParmVarDecl 0x328e2d8 <col:10, col:16> col:16 x 'float'
| `-ParmVarDecl 0x328e348 <col:19, col:25> col:25 y 'float'
`-FunctionDecl 0x328e528 <line:11:1, line:21:1> line:11:5 main 'int ()'
  `-CompoundStmt 0x328eb28 <col:12, line:21:1>
    |-DeclStmt 0x328e640 <line:12:2, col:7>
    | `-VarDecl 0x328e5e0 <col:2, col:6> col:6 used c 'int'
    |-BinaryOperator 0x328e6a0 <line:13:2, col:6> 'int' '='
    | |-DeclRefExpr 0x328e658 <col:2> 'int' lvalue Var 0x328e5e0 'c' 'int'
    | `-IntegerLiteral 0x328e680 <col:6> 'int' 3
    |-DeclStmt 0x328e8d8 <line:14:2, col:22>
    | `-VarDecl 0x328e748 <col:2, col:21> col:6 used d 'int [3]' cinit
    |   `-InitListExpr 0x328e868 <col:13, col:21> 'int [3]'
    |     |-IntegerLiteral 0x328e7a8 <col:14> 'int' 2
    |     |-ImplicitCastExpr 0x328e8c0 <col:17> 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x328e7c8 <col:17> 'int' lvalue Var 0x328e5e0 'c' 'int'
    |     `-IntegerLiteral 0x328e7f0 <col:20> 'int' 4
    |-BinaryOperator 0x328e938 <line:15:2, col:6> 'int' '='
    | |-DeclRefExpr 0x328e8f0 <col:2> 'int' lvalue Var 0x328e5e0 'c' 'int'
    | `-IntegerLiteral 0x328e918 <col:6> 'int' 20
    |-CallExpr 0x328eaa0 <line:16:2, col:14> 'void'
    | |-ImplicitCastExpr 0x328ea88 <col:2> 'void (*)(int *, int *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x328e960 <col:2> 'void (int *, int *)' Function 0x3247a10 'foo' 'void (int *, int *)'
    | |-ImplicitCastExpr 0x328ead8 <col:6> 'int *' <ArrayToPointerDecay>
    | | `-DeclRefExpr 0x328e988 <col:6> 'int [3]' lvalue Var 0x328e748 'd' 'int [3]'
    | `-UnaryOperator 0x328ea38 <col:9, col:13> 'int *' prefix '&'
    |   `-ArraySubscriptExpr 0x328ea10 <col:10, col:13> 'int' lvalue
    |     |-ImplicitCastExpr 0x328e9f8 <col:10> 'int *' <ArrayToPointerDecay>
    |     | `-DeclRefExpr 0x328e9b0 <col:10> 'int [3]' lvalue Var 0x328e748 'd' 'int [3]'
    |     `-IntegerLiteral 0x328e9d8 <col:12> 'int' 1
    `-ReturnStmt 0x328eb10 <line:20:2, col:9>
      `-IntegerLiteral 0x328eaf0 <col:9> 'int' 0

